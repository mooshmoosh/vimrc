#!/bin/bash

export XDG_CONFIG_HOME=$HOME/extra_configs/python-lsp-nvim/config
export XDG_DATA_HOME=$HOME/extra_configs/python-lsp-nvim/data
mkdir -p $XDG_CONFIG_HOME/nvim/

cat > $XDG_CONFIG_HOME/nvim/init.lua <<EOF
-- packer setup {{{
require('packer').startup(function(use)
    use 'wbthomason/packer.nvim'
    use 'neovim/nvim-lspconfig'
    use {'nvim-tree/nvim-tree.lua',
      requires = {
        'nvim-tree/nvim-web-devicons',

      }
    }
    use {
      'nvim-telescope/telescope.nvim', tag = '0.1.4',
      requires = { {'nvim-lua/plenary.nvim'} }
    }
    use 'psf/black'
end)
-- }}}
-- LSP setup {{{
-- -- for python
require'lspconfig'.jedi_language_server.setup{}
-- -- for terraform
require'lspconfig'.terraformls.setup{}

-- Use LspAttach autocommand to only map the following keys
-- after the language server attaches to the current buffer
vim.api.nvim_create_autocmd('LspAttach', {
  group = vim.api.nvim_create_augroup('UserLspConfig', {}),
  callback = function(ev)
    -- Enable completion triggered by <c-x><c-o>
    vim.bo[ev.buf].omnifunc = 'v:lua.vim.lsp.omnifunc'

    -- Buffer local mappings.
    local opts = { buffer = ev.buf }
    vim.keymap.set('n', '<leader>d', vim.lsp.buf.definition, opts)
    vim.keymap.set('n', '<leader>D', vim.lsp.buf.implementation, opts)
    vim.keymap.set('n', 'K', vim.lsp.buf.hover, opts)
    vim.keymap.set('n', '<leader>r', vim.lsp.buf.rename, opts)
    vim.keymap.set({ 'n', 'v' }, '<leader>ca', vim.lsp.buf.code_action, opts)
    vim.keymap.set('n', '<leader>N', vim.lsp.buf.references, opts)
  end,
})
-- }}}
-- Lua functions for interacting with vim {{{
function set_clipboard(text)
    vim.cmd("let @+='" .. text .. "'")
end

function get_current_filename()
    return vim.api.nvim_buf_get_name(0)
end

function get_line(number)
    return vim.api.nvim_buf_get_lines(0, number-1, number, false)[1]
end

function get_lines(selected_range)
    return vim.api.nvim_buf_get_lines(0, selected_range[1][1]-1, selected_range[2][1], false)
end

function get_selected_lines()
    local selected_range = get_selection_range()
    return get_lines(selected_range)
end

function set_line(number, text)
    vim.api.nvim_buf_set_lines(0, number-1, number, 0, {text})
end

function insert_line(number, text)
    vim.api.nvim_buf_set_lines(0, number-1, number-1, 0, {text})
end

function get_first_line_matching(patterns)
    for i=0, vim.api.nvim_buf_line_count(0), 1 do
        for j=1, #patterns, 1 do
            if (string.match(vim.api.nvim_buf_get_lines(0, i, i+1, false)[1], patterns[j]) ~= nil) then
                return i + 1
            end
        end
    end
end

function get_position()
    return vim.api.nvim_win_get_cursor(0)
end

function get_selection_range()
    local start = vim.api.nvim_buf_get_mark(0, '<')
    local end_mark = vim.api.nvim_buf_get_mark(0, '>')
    if (end_mark[2] == 0) then
        end_mark = {end_mark[1] - 1, #get_line(end_mark[1]-1)}
    end
    return {start, end_mark}
end

function split_string(str, separator)
    local result = {}
    for x in string.gmatch(get_current_filename(), '[^' .. separator .. ']*') do
        if (#x > 0) then
            table.insert(result, x)
        end
    end
    return result
end

function split_indent_from_multiple_lines(lines)
    if (#lines == 0) then
        return {}
    end
    local minimum_indent, line = unpack(split_indent_from_line(lines[1]))
    for i = 2, #lines, 1 do
        indent, line = unpack(split_indent_from_line(lines[i]))
        if (#indent < #minimum_indent) then
            minimum_indent = indent
        end
    end
    result = {}
    for i = 1, #lines, 1 do
        table.insert(result, {minimum_indent, string.sub(lines[i], #minimum_indent + 1)})
    end
    return result
end

function split_indent_from_line(text, force_indent)
    if (force_indent == nil) then
        local indent_position, nothing = string.find(text, "[^%s]")
        if (indent_position == nil) then
            return {"", ""}
        else
            return {
                string.sub(text, 1, indent_position-1),
                string.sub(text, indent_position)
            }
        end
    else
        return {
            force_indent,
            string.sub(text, #force_indent + 1)
        }
    end
end

-- }}}
-- Lua functions used in keyboard shortcuts {{{

function copy_current_file_name()
    set_clipboard(get_current_filename())
end

function exit_visual_mode()
    local esc = vim.api.nvim_replace_termcodes('<esc>', true, false, true)
    vim.api.nvim_feedkeys(esc, 'x', false)
end

function copy_current_selection_as_github()
    exit_visual_mode()
    local parts = split_string(get_current_filename(), "/")
    local repo_name = parts[4]
    local final_path = ""
    for i = 5, #parts, 1 do
        final_path = final_path .. "/" .. parts[i]
    end
    local selection_range = get_selection_range()
    local result = vim.env.GITHUB_BASE_URL .. "/" .. repo_name .. "/blob/development" .. final_path .. "#L" .. selection_range[1][1] .. "-L" .. selection_range[2][1]
    set_clipboard(result)
    print("Copied: " .. result)
end

function split_line_into_paragraph()
    local line = get_line(get_position())
    -- TODO implement this
end

function toggle_spell_check_highlighting()
    vim.opt.spell = not(vim.opt.spell._value)
end

function exit_curent_buffer()
    local current_filename = get_current_filename()
    if (string.sub(current_filename, 0, 7) == "term://") then
        -- You can't save terminal buffers, so we need to force quit them
        vim.cmd("bdelete!")
    elseif (current_filename == "") then
        -- if a file has no name, we also can't save it, so we need to force quit these too.
        vim.cmd("bdelete!")
    else
        vim.cmd("bdelete")
    end
end

function add_import_to_current_file()
    local import_name = vim.fn.input("which module to import? ")
    if (import_name == "") then
        return
    end
    local from_start, from_end = string.find(import_name, " from ")
    if from_start == nil then
        insert_line(get_first_line_matching({"import.*", "from.*import.*"}), "import " .. import_name)
    else
        import_value = string.sub(import_name, 1, from_start - 1)
        module_name = string.sub(import_name, from_end + 1)
        insert_line(get_first_line_matching({"import.*", "from.*import.*"}), "from " .. module_name .. " import " .. import_value)
    end
end

function comment_out_line(i, force_indent)
    local indent, line = unpack(split_indent_from_line(get_line(i), force_indent))
    if (string.sub(line, 1, 2) == "# ") then
        set_line(i, indent .. string.sub(line, 3))
    else
        set_line(i, indent .. '# ' .. line)
    end
end

function comment_out_selection()
    exit_visual_mode()
    local selection_range = get_selection_range()
    local lines = split_indent_from_multiple_lines(get_lines(selection_range))
    for i = selection_range[1][1], selection_range[2][1], 1 do
        comment_out_line(i, lines[1][1])
    end
end

function comment_out_current_line()
    comment_out_line(get_position()[1])
end

-- }}}
-- General setup: {{{
-- Key mappings {{{
vim.g.mapleader = ','
vim.keymap.set('i', 'kj', '<ESC>')
-- quitting or switching buffers / tabs
vim.keymap.set('n', '<leader>q', exit_curent_buffer)
vim.keymap.set('n', '<leader>/', '<cmd>bnext<CR>')
vim.keymap.set('n', '<leader>,', '<cmd>bNext<CR>')
vim.keymap.set('n', '<leader>.', '<cmd>buffer #<CR>')
vim.keymap.set('n', '<leader>?', '<cmd>tabnext<CR>')
vim.keymap.set('n', '<leader><', '<cmd>tabNext<CR>')
-- the start of the command to open a file in the same directory as the current file
vim.keymap.set('n', '<leader>oi', ':edit %:p:h/')
-- open a new blank file with no name, usefull for random scratch buffers
vim.keymap.set('n', '<leader>oi', ':enew')
vim.keymap.set('n', '<leader>tt', '<cmd>edit term:///bin/bash<CR>a')
vim.keymap.set('t', '<C-k><C-j>', '<C-\\\\><c-n>')
-- open the file tree explorer
vim.keymap.set('n', '<leader>nt', ':NvimTreeToggle<CR>')
-- ctrl-x ctrl-o to open omnicomplete is obnouxious. Tab weould be nice, but leader tab is ok too
vim.keymap.set('i', '<leader><tab>', '<c-x><c-o>')
-- clipboard fixes
clipboard_commands = {'y', 'p', 'P'}
for i=1,#clipboard_commands do
    vim.keymap.set('n', clipboard_commands[i], '"+' .. clipboard_commands[i])
    vim.keymap.set('v', clipboard_commands[i], '"+' .. clipboard_commands[i])
end
-- I make d delete without cutting, and s cutting in the usual way
modes = {'n', 'v'}
for i=1,#modes do
    vim.keymap.set(modes[i], 's', '"+d')
    vim.keymap.set(modes[i], 'd', '"_d')
    vim.keymap.set(modes[i], 'x', '"_x')
end
-- cutting or copying a single line is a special case, not in visual mode
vim.keymap.set('n', 'ss', '"+dd')
vim.keymap.set('n', 'yy', '"+yy')
-- copy the current filename
vim.keymap.set('n', '<leader>kf', copy_current_file_name)
-- Add an import
vim.keymap.set('n', '<leader>c#', add_import_to_current_file)
-- Comment out the selected lines
vim.keymap.set('v', '<leader>cc', comment_out_selection)
-- Comment out the current line
vim.keymap.set('n', '<leader>cc', comment_out_current_line)
-- copy the current selection as a github link
vim.keymap.set('v', '<leader>kg', copy_current_selection_as_github)
-- split the current line into a paragraph of smaller lines, each < 75 characters long
vim.keymap.set('n', '<leader>le', split_line_into_paragraph)
-- Toggle spell check
vim.keymap.set('n', '<leader>ss', toggle_spell_check_highlighting)
--}}}
-- Options {{{
vim.opt.number = true
vim.opt.expandtab = true
vim.opt.shiftwidth = 4
vim.opt.hlsearch = false
--}}}
-- }}}
-- Triggers and autocommands {{{
vim.api.nvim_create_autocmd("BufWritePre", {
    pattern = "*.py",
    command = ":Black",
})
-- }}}
-- Plugin setup {{{
-- Setup nvim tree {{{
-- disable netrw at the very start of your init.lua
vim.g.loaded_netrw = 1
vim.g.loaded_netrwPlugin = 1
-- set termguicolors to enable highlight groups
vim.opt.termguicolors = true
require("nvim-tree").setup()
-- }}}
-- Setup telescope (fuzzy finding)
local builtin = require('telescope.builtin')
vim.keymap.set('n', '<C-p>', builtin.find_files, {})
vim.keymap.set('n', '<leader>gg', builtin.live_grep, {})
-- Not sure what these do, or if we needthem
--vim.keymap.set('n', '<leader>fb', builtin.buffers, {})
--vim.keymap.set('n', '<leader>fh', builtin.help_tags, {})
-- Black formatter
vim.g.black_linelength = 120
vim.g.python3_host_prog = "$HOME/pythonvenv/bin/python"
-- }}}
EOF

if [ ! -d "$XDG_DATA_HOME/nvim/site/pack/packer/start/packer.nvim/.git" ]
then
    echo "Packer is not present... Downloading"
    git clone --depth 1 https://github.com/wbthomason/packer.nvim $XDG_DATA_HOME/nvim/site/pack/packer/start/packer.nvim
fi
export PATH=$PATH:$HOME/pythonvenv/bin/
if [ -f pyproject.toml ]
then
    # Assume we're in a poetry project
    poetry run nvim "$@"
else
    source ~/pythonvenv/bin/activate
    nvim "$@"
fi
